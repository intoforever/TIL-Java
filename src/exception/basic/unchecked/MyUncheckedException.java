package exception.basic.unchecked;

/**
 * RuntimeException을 상속받은 예외는 언체크 예외가 된다.
 *
 * ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
 * 체크 예외와 언체크 예외는 기본적으로 똑!같!다!
 * 언체크 예외는 체크 예외와 다르게 throws 예외를 선언하지 않아도 된다. (생략하는 것이 default, 선언해도 됨)
 * 말 그대로 컴파일러가 이런 부분을 체크하지 않기 때문에 언체크 예외이다.
 *
 * ※ 현대 어플리케이션 개발에서는 체크 예외를 거의 사용하지 않는다.
 * ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
 *
 * 언체크 예외는 주로 생략하지만, 중요한 예외의 경우 선언해두면 해당 코드를 호출하는 개발자가 IDE를 통해 더 편리하게 인지할 수 있다.
 * 하지만, 언체크 예외 던지는 것을 선언한다고 해서 체크 예외처럼 컴파일러를 통해서 체크할 수 있는 것은 아니다.
 * 해당 메서드를 호출하는 개발자가 발생 가능성을 인지할 수 있는 정도이다.
 *
 * ※ 언체크 예외의 장단점
 * 언체크 예외는 예외를 잡아서 처리할 수 없을 때, 예외를 밖으로 던지는 throws 예외를 생략할 수 있다.
 * 이것 때문에 장단점이 동시에 존재한다.
 *
 * - 장점: 신경쓰고 싶지 않은 언체크 예외를 무시할 수 있다.
 * 체크 예외의 경우 처리할 수 없는 예외를 밖으로 던지려면 항상 throws 예외를 선언해야 하지만, 언체크 예외는 이 부분을 생략할 수 있다.
 *
 * - 단점: 언체크 예외는 개발자가 실수로 예외를 누락할 수 있다. 반면에 체크 예외는 컴파일러를 통해 예외 누락을 잡아준다.
 */
public class MyUncheckedException extends RuntimeException {
    public MyUncheckedException(String message) {
        super(message);
    }
}
